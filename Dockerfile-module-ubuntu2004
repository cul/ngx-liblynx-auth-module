FROM ubuntu:20.04

# these are overridable but this Dockerfile is aimed at delivering
# compatibility with more recent nginx versions
ARG NGINX_VERSION=1.18.0
ARG JANSSON_VERSION=2.13.1
ARG LIBJWT_VERSION=1.13.1

ENV LD_LIBRARY_PATH=/usr/local/lib
ENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/share/pkgconfig

RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y build-essential cmake autoconf libtool unzip wget \
    libpcre3-dev libssl-dev zlib1g-dev libxslt1-dev libgd-dev

# configure and build target nginx without module
RUN mkdir -p /root/dl && cd /root/dl && \
    wget http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz && \
    tar -xzf nginx-$NGINX_VERSION.tar.gz && \
    rm nginx-$NGINX_VERSION.tar.gz && \
    ln -sf nginx-$NGINX_VERSION nginx && \
    cd /root/dl/nginx && \
    ./configure --sbin-path=/usr/sbin/nginx \
    --with-cc-opt='-g -O2 -fdebug-prefix-map=/build/nginx-KTLRnK/nginx-1.18.0=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC -Wdate-time -D_FORTIFY_SOURCE=2' --with-ld-opt='-Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-z,now -fPIC' --prefix=/usr/share/nginx --conf-path=/etc/nginx/nginx.conf --http-log-path=/var/log/nginx/access.log --error-log-path=/var/log/nginx/error.log --lock-path=/var/lock/nginx.lock --pid-path=/run/nginx.pid --modules-path=/usr/lib/nginx/modules --http-client-body-temp-path=/var/lib/nginx/body --http-fastcgi-temp-path=/var/lib/nginx/fastcgi --http-proxy-temp-path=/var/lib/nginx/proxy --http-scgi-temp-path=/var/lib/nginx/scgi --http-uwsgi-temp-path=/var/lib/nginx/uwsgi --with-debug --with-compat --with-pcre-jit --with-http_ssl_module --with-http_stub_status_module --with-http_realip_module --with-http_auth_request_module --with-http_v2_module --with-http_dav_module --with-http_slice_module --with-threads --with-http_addition_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_image_filter_module=dynamic --with-http_sub_module --with-http_xslt_module=dynamic --with-stream=dynamic --with-stream_ssl_module --with-mail=dynamic --with-mail_ssl_module && \
    make && \
    make install

# build jansson
RUN cd /root/dl && \
    wget https://github.com/akheron/jansson/archive/v$JANSSON_VERSION.zip && \
    unzip v$JANSSON_VERSION.zip && \
    rm v$JANSSON_VERSION.zip && \
    ln -sf jansson-$JANSSON_VERSION jansson && \
    cd /root/dl/jansson && \
    cmake . -DJANSSON_BUILD_SHARED_LIBS=1 -DJANSSON_BUILD_DOCS=OFF && \
    make && \
    make check && \
    make install

# build libjwt
RUN cd /root/dl && \
    wget https://github.com/benmcollins/libjwt/archive/v$LIBJWT_VERSION.zip && \
    unzip v$LIBJWT_VERSION.zip && \
    rm v$LIBJWT_VERSION.zip && \
    ln -sf libjwt-$LIBJWT_VERSION libjwt && \
    cd /root/dl/libjwt && \
    autoreconf -i && \
    ./configure && \
    make all && \
    make install


# now we have a ubuntu container, with our target nginx and supporting libraries - we can set things up
#Â to allow rapid rebuilding of our module

# copy enough that we can configure nginx and just keep it in layer...
RUN mkdir /root/dl/ngx-liblynx-auth-module
ADD config /root/dl/ngx-liblynx-auth-module/

RUN cd /root/dl/nginx && \
  ./configure --sbin-path=/usr/sbin/nginx --add-dynamic-module=../ngx-liblynx-auth-module \
  --with-cc-opt='-g -O2 -fdebug-prefix-map=/build/nginx-KTLRnK/nginx-1.18.0=. -fstack-protector-strong -Wformat -Werror=format-security -fPIC -Wdate-time -D_FORTIFY_SOURCE=2' --with-ld-opt='-Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-z,now -fPIC' --prefix=/usr/share/nginx --conf-path=/etc/nginx/nginx.conf --http-log-path=/var/log/nginx/access.log --error-log-path=/var/log/nginx/error.log --lock-path=/var/lock/nginx.lock --pid-path=/run/nginx.pid --modules-path=/usr/lib/nginx/modules --http-client-body-temp-path=/var/lib/nginx/body --http-fastcgi-temp-path=/var/lib/nginx/fastcgi --http-proxy-temp-path=/var/lib/nginx/proxy --http-scgi-temp-path=/var/lib/nginx/scgi --http-uwsgi-temp-path=/var/lib/nginx/uwsgi --with-debug --with-compat --with-pcre-jit --with-http_ssl_module --with-http_stub_status_module --with-http_realip_module --with-http_auth_request_module --with-http_v2_module --with-http_dav_module --with-http_slice_module --with-threads --with-http_addition_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_image_filter_module=dynamic --with-http_sub_module --with-http_xslt_module=dynamic --with-stream=dynamic --with-stream_ssl_module --with-mail=dynamic --with-mail_ssl_module

# now we can add the latest source - changes will trigger these layers and below
ADD . /root/dl/ngx-liblynx-auth-module

# now build the module
RUN cd /root/dl/nginx && \
  make modules && \
  cp /root/dl/nginx/objs/ngx_liblynx_auth_module.so /usr/lib/nginx/modules/.

# Get nginx ready to run for testing
COPY resources/nginx.conf /etc/nginx/nginx.conf
COPY resources/test-liblynx-nginx.conf /etc/nginx/conf.d/test-liblynx-nginx.conf
RUN rm -rf /usr/share/nginx/html
RUN cp -r /root/dl/nginx/html /usr/share/nginx
RUN cp -r /usr/share/nginx/html /usr/share/nginx/secure
RUN cp -r /usr/share/nginx/html /usr/share/nginx/secure-abcd
RUN cp -r /usr/share/nginx/html /usr/share/nginx/soft
RUN /usr/sbin/useradd nginx
RUN mkdir -p /var/lib/nginx/tmp
RUN chown -R nginx.nginx /var/lib/nginx/tmp

#need to copy modules
RUN mkdir -p /usr/share/nginx/modules && cp /usr/lib/nginx/modules/* /usr/share/nginx/modules

# copy build artifacts where they can be easily extracted
RUN mkdir /root/build && \
  cp /usr/lib/nginx/modules/ngx_liblynx_auth_module.so /root/build/ &&\
  cp /usr/local/lib/libjansson.* /root/build/ && \
  cp /usr/local/lib/libjwt.* /root/build/ && \
  cp /usr/local/lib/pkgconfig/*.pc /root/build/

# set up a flexible entrypoint
ADD entrypoint.sh /root/entrypoint.sh
ENTRYPOINT ["/root/entrypoint.sh"]
CMD ["nginx", "-g", "daemon off;"]

STOPSIGNAL SIGTERM

EXPOSE 8000
