FROM centos:6

# these are overridable but this Dockerfile is aimed at delivering
# compatibility with older nginx releases available in Centos 6
ARG NGINX_VERSION=1.10.0
ARG JANSSON_VERSION=2.10
ARG LIBJWT_VERSION=1.8.0

ENV LD_LIBRARY_PATH=/usr/local/lib
ENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/share/pkgconfig

RUN yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm && \
    yum -y update && \
    yum -y groupinstall 'Development Tools' && \
    yum -y install pcre-devel pcre zlib-devel openssl-devel wget cmake check-devel check

# for compiling for rh-nginx110
RUN yum -y install libxml2 libxslt libxml2-devel libxslt-devel gd gd-devel perl-ExtUtils-Embed

RUN mkdir -p /root/dl
WORKDIR /root/dl

# build required nginx version - the config line is same as the packaged centos:6 version
# less a geoip module
RUN wget http://nginx.org/download/nginx-$NGINX_VERSION.tar.gz && \
    tar -xzf nginx-$NGINX_VERSION.tar.gz && \
    rm nginx-$NGINX_VERSION.tar.gz && \
    ln -sf nginx-$NGINX_VERSION nginx && \
    cd /root/dl/nginx && \
    ./configure --prefix=/usr/share/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib64/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --http-client-body-temp-path=/var/lib/nginx/tmp/client_body --http-proxy-temp-path=/var/lib/nginx/tmp/proxy --http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi --http-uwsgi-temp-path=/var/lib/nginx/tmp/uwsgi --http-scgi-temp-path=/var/lib/nginx/tmp/scgi --pid-path=/var/run/nginx.pid --lock-path=/var/lock/subsys/nginx --user=nginx --group=nginx --with-file-aio --with-ipv6 --with-http_ssl_module --with-http_v2_module --with-http_realip_module --with-http_addition_module --with-http_xslt_module=dynamic --with-http_image_filter_module=dynamic --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_degradation_module --with-http_slice_module --with-http_stub_status_module --with-http_perl_module=dynamic --with-mail=dynamic --with-mail_ssl_module --with-pcre --with-pcre-jit --with-stream=dynamic --with-stream_ssl_module --with-debug --with-cc-opt='-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic' --with-ld-opt=' -Wl,-E' && \
    make && \
    make install

# build jansson
RUN cd /root/dl/ && \
  wget https://github.com/akheron/jansson/archive/v$JANSSON_VERSION.zip && \
  unzip v$JANSSON_VERSION.zip && \
  rm -f v$JANSSON_VERSION.zip && \
  ln -sf jansson-$JANSSON_VERSION jansson && \
  cd /root/dl/jansson && \
  cmake . -DJANSSON_BUILD_SHARED_LIBS=1 -DJANSSON_BUILD_DOCS=OFF && \
  make && \
  make check && \
  make install

# On centos6 autoreconf fails and we have to use a tarball for the source
# which has a prebuilt configure
# https://github.com/benmcollins/libjwt/issues/63
ADD libjwt_$LIBJWT_VERSION.orig.tar.xz /root/dl/

RUN cd /root/dl/ && \
  ln -sf libjwt-1.8.0 libjwt && \
  cd /root/dl/libjwt && \
  ./configure && \
  make all && \
  make install

# now we have a centos 6 container, with our target nginx and supporting libraries - we can set things up
# to allow rapid rebuilding of our module

# copy enough that we can configure nginx and just keep it in layer...
RUN mkdir /root/dl/ngx-liblynx-auth-module
ADD config /root/dl/ngx-liblynx-auth-module/

RUN cd /root/dl/nginx && \
  ./configure --add-dynamic-module=../ngx-liblynx-auth-module --prefix=/usr/share/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib64/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --http-client-body-temp-path=/var/lib/nginx/tmp/client_body --http-proxy-temp-path=/var/lib/nginx/tmp/proxy --http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi --http-uwsgi-temp-path=/var/lib/nginx/tmp/uwsgi --http-scgi-temp-path=/var/lib/nginx/tmp/scgi --pid-path=/var/run/nginx.pid --lock-path=/var/lock/subsys/nginx --user=nginx --group=nginx --with-file-aio --with-ipv6 --with-http_ssl_module --with-http_v2_module --with-http_realip_module --with-http_addition_module --with-http_xslt_module=dynamic --with-http_image_filter_module=dynamic --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_degradation_module --with-http_slice_module --with-http_stub_status_module --with-http_perl_module=dynamic --with-mail=dynamic --with-mail_ssl_module --with-pcre --with-pcre-jit --with-stream=dynamic --with-stream_ssl_module --with-debug --with-cc-opt='-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic' --with-ld-opt=' -Wl,-E'

# now we can add the latest source - changes will trigger these layers and below
ADD . /root/dl/ngx-liblynx-auth-module

# now build the module
RUN cd /root/dl/nginx && \
  make modules && \
  cp /root/dl/nginx/objs/ngx_liblynx_auth_module.so /usr/lib64/nginx/modules/.


# Get nginx ready to run for testing
COPY resources/nginx.conf /etc/nginx/nginx.conf
COPY resources/test-liblynx-nginx.conf /etc/nginx/conf.d/test-liblynx-nginx.conf
RUN rm -rf /usr/share/nginx/html
RUN cp -r /root/dl/nginx/html /usr/share/nginx
RUN cp -r /usr/share/nginx/html /usr/share/nginx/secure
RUN cp -r /usr/share/nginx/html /usr/share/nginx/secure-abcd
RUN /usr/sbin/useradd nginx
RUN mkdir -p /var/lib/nginx/tmp
RUN chown -R nginx.nginx /var/lib/nginx/tmp


# copy build artifacts where they can be easily extracted
RUN mkdir /root/build && \
  cp /usr/lib64/nginx/modules/ngx_liblynx_auth_module.so /root/build/ &&\
  cp /usr/local/lib/libjansson.* /root/build/ && \
  cp /usr/local/lib/libjwt.* /root/build/ && \
  cp /usr/local/lib/pkgconfig/*.pc /root/build/

# set up a flexible entrypoint
ADD entrypoint.sh /root/entrypoint.sh
ENTRYPOINT ["/root/entrypoint.sh"]
CMD ["nginx", "-g", "daemon off;"]

STOPSIGNAL SIGTERM

EXPOSE 8000
